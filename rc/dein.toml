[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#virtualenv#enabled = 1
    let g:airline#extensions#tabline#enabled = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'vim-scripts/fcitx.vim'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
    nnoremap <silent> <Leader>w :FixWhitespace<CR>
'''

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <Leader>f :<C-u>NERDTreeToggle<CR>
  let NERDTreeIgnore = ['\.pyc$']
  let g:NERDTreeQuitOnOpen=1
  let g:NERDTreeShowHidden=1
  let g:NERDTreeIgnore=['\.git$', '\.clean$', '\.swp$', '\.bak$', '\~$']
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'jacquesbh/vim-showmarks'
hook_add = '''
  nnoremap [Mark] <Nop>
  nmap m [Mark]
  if !exists('g:markrement_char')
      let g:markrement_char = [
      \     'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
      \     'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
      \ ]
  endif
  nnoremap <silent>[Mark]s :<C-u>call <SID>AutoMarkrement()<CR>:DoShowMarks<CR>
  function! s:AutoMarkrement()
      if !exists('b:markrement_pos')
          let b:markrement_pos = 0
      else
          let b:markrement_pos = (b:markrement_pos + 1) % len(g:markrement_char)
      endif
      execute 'mark' g:markrement_char[b:markrement_pos]
      echo 'marked' g:markrement_char[b:markrement_pos]
  endfunction
  let b:mark_exist = 0
  set updatetime=1
  function! s:MarkList()
    if b:mark_exist == 0
      let b:mark_exist = 1
      nnoremap <silent>[Mark]l :<C-u>1PreviewMarks<CR>
      \:<C-u>NoShowMarks<CR> :<C-u>call <SID>MarkList()<CR>
    else
      let b:mark_exist = 0
      nnoremap <silent>[Mark]l :<C-u>PreviewMarks<CR>
      \:<C-u>DoShowMarks<CR> :<C-u>call <SID>MarkList()<CR>
    endif
  endfunction
  nnoremap <silent>[Mark]l :<C-u>PreviewMarks<CR>
  \:<C-u>DoShowMarks<CR> :<C-u>call <SID>MarkList()<CR>
  nnoremap [Mark]m '
  nnoremap [Mark]n ]`
  nnoremap [Mark]b [`
  nnoremap [Mark]D :<C-u>1PreviewMarks<CR> :delmarks!<CR>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  nmap <Leader>b <Plug>(openbrowser-smart-search)
  vmap <Leader>b <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 1
  let g:EasyMotion_smartcase = 1
  let g:EasyMotion_use_upper = 1
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
  nmap <Leader>s <Plug>(easymotion-s2)
  vmap <Leader>s <Plug>(easymotion-s2)
  nmap <Leader>j <Plug>(easymotion-j)
  nmap <Leader>k <Plug>(easymotion-k)
  vmap <Leader>j <Plug>(easymotion-j)
  vmap <Leader>k <Plug>(easymotion-k)
  nmap g/ <Plug>(easymotion-sn)
  vmap g/ <Plug>(easymotion-sn)
  omap g/ <Plug>(easymotion-tn)
'''
